# Generated by Django 4.0.1 on 2022-01-11 10:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.manager
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house_building_number', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(5)])),
                ('village_city', models.CharField(blank=True, max_length=50)),
                ('pin_code', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.MinValueValidator(1)])),
                ('address', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'MALE'), ('female', 'FEMALE'), ('other', 'OTHER')], max_length=200)),
                ('attachment_date', models.DateField(auto_now_add=True)),
                ('contact', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('date_of_birth', models.DateField(blank=True, default=None, null=True)),
                ('profile_picture', models.ImageField(blank=True, upload_to=user.models.user_profile)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', user.manager.CustomUserManager()),
            ],
        ),
    ]
